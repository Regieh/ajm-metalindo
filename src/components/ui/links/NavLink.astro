---
const { url, name, dropdown } = Astro.props;
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

const currentPath = Astro.url.pathname;

// Fetch projects for dropdown if needed
const projects: CollectionEntry<"projects">[] = dropdown
  ? (
      await getCollection("projects", ({ id }) => id.startsWith("en/"))
    ).sort((a, b) => a.data.main.id - b.data.main.id)
  : [];

const isActive = currentPath.startsWith("/projects");
const elementId = url === "/" ? "home" : url.replace("/", "");
---

<!-- Navigation Item (Dropdown or Regular Link) -->
<div class="dropdown-container relative">
  {dropdown ? (
    <button
      id={elementId}
      data-dropdown-toggle
      class={`navlink rounded-lg text-base font-medium outline-none ring-zinc-500 hover:text-neutral-300 focus-visible:ring dark:ring-zinc-200 dark:hover:text-neutral-300 dark:focus:outline-none md:py-3 md:text-sm 2xl:text-base transition whitespace-nowrap ${
        isActive ? "text-redP font-bold underline underline-offset-8" : "text-white"
      }`}
      aria-haspopup="true"
      aria-expanded="false"
    >
      {name}
    </button>
  ) : (
    <a
      id={elementId}
      href={url}
      data-astro-prefetch
      class="navlink rounded-lg text-base font-medium text-white outline-none ring-zinc-500 hover:text-neutral-300 focus-visible:ring dark:ring-zinc-200 dark:hover:text-neutral-300 dark:focus:outline-none md:py-3 md:text-sm 2xl:text-base transition whitespace-nowrap"
    >
      {name}
    </a>
  )}

  {dropdown && (
    <div id="dropdown" class="absolute left-0 mt-2 hidden w-max bg-black shadow-lg z-50">
      {projects.map((project) => {
        const isProjectActive = currentPath.includes(project.data.tabName.toLowerCase());
        return (
          <a
            href={`/projects/${project.data.tabName.toLowerCase()}`}
            class={`block px-4 py-2 text-sm transition whitespace-nowrap ${
              isProjectActive ? "bg-redP text-white" : "text-white"
            } hover:bg-redP hover:text-white`}
          >
            {project.data.title}
          </a>
        );
      })}
    </div>
  )}
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const currentPath = window.location.pathname;
    const elementId = currentPath === "/" ? "home" : currentPath.replace("/", "");
    const navElement = document.getElementById(elementId);

    // Apply active styling immediately
  if (navElement && !navElement.getAttribute("aria-haspopup")) {
    navElement.classList.remove(
      "text-black",
      "dark:text-neutral-400",
      "hover:text-neutral-300",
      "dark:hover:text-neutral-300"
    );
    navElement.classList.add("!text-redP", "font-bold", "underline", "underline-offset-8");
    navElement.setAttribute("aria-current", "page");
  }

  window.addEventListener("scroll", () => {
  const navLinks = document.querySelectorAll(".navlink");
  const scrolled = window.scrollY > 0;

  navLinks.forEach((link) => {
    // For active links - always keep them text-redP
    if (link.id === elementId && !link.getAttribute("aria-haspopup")) {
      link.classList.add("text-redP");
      link.classList.remove("text-white");
    } 
    // For non-active links - always keep them text-white
    else {
      link.classList.add("text-white");
      link.classList.remove("text-redP");
    }
  });
});

    // Dropdown toggle behavior
    const toggle = document.querySelector("[data-dropdown-toggle]");
    const dropdown = document.getElementById("dropdown");
    if (toggle && dropdown) {
      toggle.addEventListener("click", (e) => {
        e.preventDefault();
        dropdown.classList.toggle("hidden");
      });
    }
  });

  window.addEventListener("resize", () => {
  const dropdown = document.getElementById("dropdown");
  if (window.innerWidth >= 768 && dropdown) {
    dropdown.classList.remove("hidden");
  }
});

</script>
