---
//Import relevant dependencies
import ThemeIcon from "@components/ThemeIcon.astro";
import NavLink from "@components/ui/links/NavLink.astro";
import Authentication from "../misc/Authentication.astro";
import enStrings from "@utils/navigation.ts";
import idStrings from "@/utils/id/navigation";
import BrandLogo from "@components/BrandLogo.astro";
import BrandLogoWhite from "@/components/BrandLogoWhite.astro";
import LanguagePicker from "@components/ui/LanguagePicker.astro";
import DropdownLink from "@/components/ui/links/DropdownLink.astro";

// Select the correct translation based on the page's lang prop:
const strings = Astro.currentLocale === "id" ? idStrings : enStrings;
const homeUrl = Astro.currentLocale === "id" ? "/id" : "/";
---

<!-- Main header component -->
<header
  class="sticky top-0 z-50 flex flex-wrap text-sm md:flex-nowrap md:justify-start md:h-24 w-screen"
>
  <!-- Navigation container -->
  <nav
    class="relative w-full bg-neutral-700/40 dark:border-neutral-700/40 dark:bg-transparent md:flex md:items-center md:justify-between"
    aria-label="Global"
    id="global-nav"
  >
    <div class="default-p w-full flex flex-col md:flex-row items-center justify-between">
      <div class="flex items-center justify-between w-full">
        <!-- Brand logo -->
        <a
          class="flex-none rounded-lg text-xl font-bold outline-none ring-zinc-500 focus-visible:ring dark:ring-zinc-200 dark:focus:outline-none"
          href={homeUrl}
          aria-label="Brand"
        >
          <!-- <BrandLogoWhite id="logo-w" class="h-auto w-16" /> -->
          <BrandLogo id="logo-p" class="h-auto w-32" />
        </a>
        <!-- Collapse toggle for smaller screens -->
        <div class="ml-auto mr-5 md:hidden">
          <button
            id="hamburger"
            type="button"
            class="hs-collapse-toggle flex h-8 w-8 items-center justify-center rounded-full text-sm font-bold text-white hover:text-gray-600 transition duration-300 hover:bg-neutral-200 disabled:pointer-events-none disabled:opacity-50 dark:text-neutral-400 dark:hover:bg-neutral-700 dark:focus:outline-none"
            data-hs-collapse="#navbar-collapse-with-animation"
            aria-controls="navbar-collapse-with-animation"
            aria-label="Toggle navigation"
          >
            <svg
              class="h-[1.25rem] w-[1.25rem] flex-shrink-0 hs-collapse-open:hidden"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <line x1="3" x2="21" y1="6" y2="6"></line>
              <line x1="3" x2="21" y1="12" y2="12"></line>
              <line x1="3" x2="21" y1="18" y2="18"></line>
            </svg>
            <svg
              class="hidden h-[1.25rem] w-[1.25rem] flex-shrink-0 hs-collapse-open:block"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M18 6 6 18"></path>
              <path d="m6 6 12 12"></path>
            </svg>
          </button>
        </div>
        <!-- ThemeIcon component specifically for smaller screens -->
        <!-- <span class="inline-block md:hidden">
          <ThemeIcon />
        </span> -->
      </div>
      <!-- Contains navigation links -->
      <div
        id="navbar-collapse-with-animation"
        class="hs-collapse hidden grow basis-full transition-all duration-300 md:block p-4 md:p-0"
      >
        <!-- Navigation links container -->
        <div
          class="mt-5 flex flex-col gap-x-0 gap-y-4 md:mt-0 md:flex-row md:items-center md:justify-end md:gap-x-4 lg:gap-x-7 md:gap-y-0 md:ps-7"
        >
          <!-- Navigation links and Authentication component -->
          {strings.navBarLinks.map((link) =>
            link.dropdown ? (
              <DropdownLink url={link.url} name={link.name} dropdown={link.dropdown} />
            ) : (
              <NavLink url={link.url} name={link.name} />
            )
          )}
        </div>
      </div>
    </div>
  </nav>
</header>
<!-- Theme Appearance script to manage light/dark modes -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
  let nav = document.getElementById('global-nav');
  if (nav) {
    window.addEventListener('scroll', () => {
      if (window.scrollY > 0) {
        nav.classList.add('bg-gray-700/40', 'backdrop-blur-md');
        nav.classList.remove('bg-neutral-700/40');
      } else {
        nav.classList.remove('bg-gray-700/40', 'backdrop-blur-md');
        nav.classList.add('bg-neutral-700/40');
      }
    });
  }
});
</script>
<script is:inline>
  const HSThemeAppearance = {
    init() {
      // const defaultTheme = "default";
      // let theme = localStorage.getItem("hs_theme") || defaultTheme;

      // if (document.querySelector("html").classList.contains("dark")) return;
      this.setAppearance("default");
    },
    _resetStylesOnLoad() {
      const $resetStyles = document.createElement("style");
      $resetStyles.innerText = `*{transition: unset !important;}`;
      $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
      document.head.appendChild($resetStyles);
      return $resetStyles;
    },
    setAppearance(theme, saveInStore = true, dispatchEvent = true) {
      const $resetStylesEl = this._resetStylesOnLoad();

      if (saveInStore) {
        localStorage.setItem("hs_theme", theme);
      }

      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }

      document.querySelector("html").classList.remove("dark");
      document.querySelector("html").classList.remove("default");
      document.querySelector("html").classList.remove("auto");

      document
        .querySelector("html")
        .classList.add(this.getOriginalAppearance());

      setTimeout(() => {
        $resetStylesEl.remove();
      });

      if (dispatchEvent) {
        window.dispatchEvent(
          new CustomEvent("on-hs-appearance-change", { detail: theme }),
        );
      }
    },
    getAppearance() {
      let theme = this.getOriginalAppearance();
      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }
      return theme;
    },
    getOriginalAppearance() {
      const defaultTheme = "default";
      return localStorage.getItem("hs_theme") || defaultTheme;
    },
  };
  HSThemeAppearance.init();

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      if (HSThemeAppearance.getOriginalAppearance() === "auto") {
        HSThemeAppearance.setAppearance("auto", false);
      }
    });

  window.addEventListener("load", () => {
    const $clickableThemes = document.querySelectorAll(
      "[data-hs-theme-click-value]",
    );
    const $switchableThemes = document.querySelectorAll(
      "[data-hs-theme-switch]",
    );

    $clickableThemes.forEach(($item) => {
      $item.addEventListener("click", () =>
        HSThemeAppearance.setAppearance(
          $item.getAttribute("data-hs-theme-click-value"),
          true,
          $item,
        ),
      );
    });

    $switchableThemes.forEach(($item) => {
      $item.addEventListener("change", (e) => {
        HSThemeAppearance.setAppearance(e.target.checked ? "dark" : "default");
      });

      $item.checked = HSThemeAppearance.getAppearance() === "dark";
    });

    window.addEventListener("on-hs-appearance-change", (e) => {
      $switchableThemes.forEach(($item) => {
        $item.checked = e.detail === "dark";
      });
    });
  });
</script>
<!--Import the necessary Collapse and Overlay plugins-->
<!--https://preline.co/plugins/html/collapse.html-->
<!--https://preline.co/plugins/html/overlay.html-->
<script>
  import "@preline/collapse/index.js";
  import "@preline/overlay/index.js";
</script>
