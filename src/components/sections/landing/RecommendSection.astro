---
// Define props from Astro
const { title, subTitle, datas } = Astro.props;

interface Recom {
  id: number; // Change `id` to number
  title?: any;
  desc?: string;
}

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle: any;
  datas: Recom[];
}
---

<section class="mx-auto default-p 2xl:max-w-full">
  <!-- Title and description -->
  <div class="mx-auto mb-6 w-full space-y-1 text-center sm:w-3/4">
    <h2 class="text-balance text-2xl font-bold leading-tight text-neutral-800 dark:text-neutral-200 sm:text-3xl">
      {title}
    </h2>
    <p class="text-pretty leading-tight text-neutral-600 dark:text-neutral-400" set:html={subTitle}></p>
  </div>

  <!-- Data Section -->
  <div class="flex flex-col items-center justify-center gap-y-2 sm:flex-row sm:gap-x-12 sm:gap-y-0 lg:gap-x-24">
    {
      datas && datas.length > 0 ? (
        datas.map((data) => {
          // Format the ID to always have 2 digits (e.g., 1 -> 01)
          const formattedId = String(data.id).padStart(2, '0');

          return (
            <div class="w-full h-52 min-h-fit bg-redP py-4 px-8 rounded-xs">
              <!-- Display the formatted ID -->
              <div class="flex flex-row justify-start items-center gap-x-2 border-b-2 border-white pb-4">
                <span class="font-oswald text-white text-6xl font-bold">{formattedId}</span>
                <!-- Display the title and description -->
                <h3 class="font-oswald uppercase font-bold text-white text-2xl dark:text-neutral-200" set:html={data.title}></h3>
              </div>
              <p class="mt-3 text-md text-white dark:text-neutral-400 flex flex-col items-start gap-y-2">
                {data.desc}
              </p>
            </div>
          );
        })
      ) : (
        <p class="text-neutral-600 dark:text-neutral-400">No data available.</p>
      )
    }
  </div>
</section>