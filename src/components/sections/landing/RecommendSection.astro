---
// Define props from Astro
const { title, subTitle, datas } = Astro.props;
interface Recom {
  id: number;
  title?: any;
  desc?: string;
}
// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle: any;
  datas: Recom[];
}
---
<section class="mx-auto 2xl:max-w-full py-8 md:py-12">
  <!-- Title and description -->
  <div class="mx-auto mb-6 w-full space-y-2 text-center sm:w-4/5 md:w-3/4 lg:w-2/3">
    <h2 class="text-balance text-2xl font-bold leading-tight text-neutral-800 dark:text-neutral-200 sm:text-3xl md:text-4xl">
      {title}
    </h2>
    <p class="text-pretty text-sm md:text-base leading-tight text-neutral-600 dark:text-neutral-400" set:html={subTitle}></p>
  </div>
  
  <!-- Data Section -->
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 lg:gap-8">
    {
      datas && datas.length > 0 ? (
        datas.map((data) => {
          // Format the ID to always have 2 digits (e.g., 1 -> 01)
          const formattedId = String(data.id).padStart(2, '0');
          return (
            <div class="w-full h-auto min-h-[13rem] bg-redP py-4 px-4 sm:px-6 md:px-8 rounded-xs flex flex-col">
              <!-- Display the formatted ID and title -->
              <div class="flex flex-row justify-start items-center gap-x-2 border-b-2 border-white pb-3">
                <span class="font-oswald text-white text-4xl sm:text-5xl md:text-6xl font-bold">{formattedId}</span>
                <h3 class="font-oswald uppercase font-bold text-white text-xl sm:text-2xl dark:text-neutral-200" set:html={data.title}></h3>
              </div>
              <!-- Description with proper spacing -->
              <p class="mt-3 text-sm md:text-md text-white dark:text-neutral-400 flex-1">
                {data.desc}
              </p>
            </div>
          );
        })
      ) : (
        <p class="text-neutral-600 dark:text-neutral-400 col-span-full text-center">No data available.</p>
      )
    }
  </div>
</section>