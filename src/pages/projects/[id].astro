---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import SubHeroSection from "@/components/sections/landing/SubHeroSection.astro";
import ProductTabBtn from "@components/ui/buttons/ProductTabBtn.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import printerBg from "@images/printer-bg.png";
import bg1 from "@images/project-subhero.png";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";
import type { CollectionEntry } from "astro:content";
import { partnersData } from "@/data_files/constants";
import ClientsSection from "@components/sections/landing/ClientsSection.astro";

const currentPath = Astro.url.pathname;

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}

// This gets the static paths for all the unique projects

export async function getStaticPaths() {
  const productEntries = await getCollection("projects", ({ id }) =>
    id.startsWith("en/")
  );
  return productEntries.map((product) => {
    const idWithoutLang = product.id.replace(/^en\//, ""); // Remove the "en/" prefix
    return {
      params: { id: idWithoutLang },
      props: { product },
    };
  });
}

const { product } = Astro.props;

const projects: CollectionEntry<"projects">[] = (
  await getCollection("projects", ({ id }) => {
    return id.startsWith("en/");
  })
).sort(
  (a: CollectionEntry<"projects">, b: CollectionEntry<"projects">) =>
    a.data.main.id - b.data.main.id,
);

const pageTitle: string = `${product.data.title} | ${SITE.title}`;
const visibleItems = 3;
---

<MainLayout title={pageTitle}>
  <SubHeroSection
    title="Projects"
    subTitle="Don't hesitate to contact us. Let's collaborate and bring your vision to life—because at Metalindo, your satisfaction is our priority."
    src={bg1}
    alt="Contact Us"
  />

  <nav class="bg-redP text-white relative mt-16 md:-mt-3">
    <!-- Desktop Navigation (Always Visible) -->
    <div class="hidden md:flex flex-wrap justify-center items-center gap-y-2">
      {projects.map((project, index) => {
        const isActive = currentPath.includes(project.data.tabName.toLowerCase());
  
        return (
          <a
            href={`/projects/${project.data.tabName.toLowerCase()}`}
            class={`relative px-4 py-2 ${isActive ? 'bg-white text-redP' : 'bg-redP text-white'} 
            hover:bg-white hover:text-redP transition
             ${index !== 0 ? 'before:absolute before:left-0 before:inset-y-0 before:w-[2px] before:bg-white' : ''}`}
          >
            {project.data.title}
          </a>
        );
      })}
    </div>
  
    <!-- Mobile Navigation (Collapsible) -->
    <div class="md:hidden flex flex-col items-center">
      <!-- Always Visible Items -->
      <div class="flex flex-wrap justify-center items-center gap-y-2">
        {projects.slice(0, visibleItems).map((project, index) => {
          const isActive = currentPath.includes(project.data.tabName.toLowerCase());
  
          return (
            <a
              href={`/projects/${project.data.tabName.toLowerCase()}`}
              class={`relative px-4 py-2 ${isActive ? 'bg-white text-redP' : 'bg-redP text-white'} 
              hover:bg-white hover:text-redP transition
               ${index !== 0 ? 'before:absolute before:left-0 before:inset-y-0 before:w-[2px] before:bg-white' : ''}`}
            >
              {project.data.title}
            </a>
          );
        })}
      </div>
  
      <!-- Toggle Button -->
      {projects.length > visibleItems && (
        <button
          id="toggle-button-project"
          class="mt-2 px-4 py-2 bg-white text-redP rounded-xs flex items-center gap-2"
        >
          <span id="toggle-text">All Projects ▼</span>
        </button>
      )}
  
      <!-- Collapsible Extra Projects -->
      <div id="extra-projects" class="hidden w-full flex flex-wrap justify-center items-center gap-y-2 mt-2">
        {projects.slice(visibleItems).map((project,index) => {
          const isActive = currentPath.includes(project.data.tabName.toLowerCase());
  
          return (
            <a
              href={`/projects/${project.data.tabName.toLowerCase()}`}
              class={`relative px-4 py-2 ${isActive ? 'bg-white text-redP' : 'bg-redP text-white'} 
              hover:bg-white hover:text-redP transition
               ${index !== 0 ? 'before:absolute before:left-0 before:inset-y-0 before:w-[2px] before:bg-white' : 'before:absolute before:left-0 before:inset-y-0 before:w-[2px] before:bg-white'}
               `}
            >
              {project.data.title}
            </a>
          );
        })}
      </div>
    </div>
  </nav>
  <section
    class="mx-auto flex max-w-[85rem] flex-col default-p 2xl:max-w-full"
  >
    <div
     id="fadeText" class="flex flex-row justify-between items-center py-2 my-8"
    >
      <h1 class="font-oswald font-bold text-2xl md:text-3xl leading-tight tracking-tight">{product.data.title}</h1>
      <h3 class="font-medium w-1/3">{product.data.main.mainDesc}</h3>
      <PrimaryCTA title="Order Now" url="/contact" />
    </div>
    <div
      id="fadeInMoveRight" class="grid grid-cols-3 gap-4"
    >
      {product.data.images.map((project) => (
        <div class="relative group">
          <Image src={project.url} alt={project.alt} loading="lazy" decoding="async" class="w-full h-auto object-cover aspect-[3/2]" />
          
          {/* Overlay on hover */}
          <div class="absolute inset-0 bg-red-600 bg-opacity-80 flex items-start justify-start opacity-0 group-hover:opacity-100 transition-opacity">
            <span class="text-white font-oswald leading-tight tracking-tight font-bold text-3xl ml-8 mt-8 border-l-2 border-white pl-4">{project.title}</span>
          </div>
        </div>
      ))}
    </div>
    
    <ClientsSection
      title="our client"
      subTitle="We already working with a diverse range of clients across various industries"
      partners={partnersData}
    />
</MainLayout>

<script>
  import { gsap } from "gsap";
  
  document.addEventListener("DOMContentLoaded", function () {
    const button = document.getElementById("toggle-button-project");
    const toggleText = document.getElementById("toggle-text");
    const collapsible = document.getElementById("extra-projects");

    button?.addEventListener("click", function () {
      if (!collapsible) return;
      if (!toggleText) return;
      collapsible.classList.toggle("hidden");

      if (collapsible.classList.contains("hidden")) {
        toggleText.textContent = "All Projects ▼";
      } else {
        toggleText.textContent = "Show Less ▲";
      }
    });
  });

  type AnimationSettings = {
    autoAlpha?: number;
    y?: number;
    x?: number;
    willChange?: string;
  };

  function setElementAnimationDefaults(
    id: string,
    settings: AnimationSettings
  ) {
    gsap.set(id, settings);
  }

  setElementAnimationDefaults("#fadeText", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInUp", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInMoveRight", {
    autoAlpha: 0,
    x: 300,
    willChange: "transform, opacity",
  });

  let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });

  timeline.to("#fadeText", {
    duration: 1.5,
    autoAlpha: 1,
    y: 0,
    delay: 1,
    ease: "power2.out",
  });

  timeline.to(
    "#fadeInUp",
    { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" },
    "-=1.2"
  );

  timeline.to(
    "#fadeInMoveRight",
    { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" },
    "-=1.4"
  );

  timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn: any, activeButton: any) {
      if (btn !== activeButton) {
        btn.classList.remove(
          "active",
          "bg-neutral-100",
          "hover:border-transparent",
          "dark:bg-white/[.05]"
        );

        const tabId = btn.getAttribute("data-target");
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) {
            contentElement.classList.add("hidden");
          }
        }

        changeHeadingStyle(
          btn,
          ["text-neutral-800", "dark:text-neutral-200"],
          ["text-orange-400", "dark:text-orange-300"]
        );
      }
    }

    function activateButton(button: any) {
      button.classList.add(
        "active",
        "bg-neutral-100",
        ",hover:border-transparent",
        "dark:bg-white/[.05]"
      );

      const tabId = button.getAttribute("data-target");
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) {
          contentElementToShow.classList.remove("hidden");
        }
      }

      changeHeadingStyle(
        button,
        ["text-orange-400", "dark:text-orange-300"],
        ["text-neutral-800", "dark:text-neutral-200"]
      );
    }

    function changeHeadingStyle(
      button: any,
      addClasses: any,
      removeClasses: any
    ) {
      let heading = button.querySelector("span");
      if (heading) {
        heading.classList.remove(...removeClasses);
        heading.classList.add(...addClasses);
      }
    }

    const tabButtons = document.querySelectorAll("[data-target]");

    if (tabButtons.length > 0) {
      changeHeadingStyle(
        tabButtons[0],
        ["text-orange-400", "dark:text-orange-300"],
        []
      );
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>
