---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import SubHeroSection from "@/components/sections/landing/SubHeroSection.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import printerBg from "@images/printer-bg.png";
import bg1 from "@images/project-subhero.png";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";
import type { CollectionEntry } from "astro:content";
import { partnersData } from "@/data_files/constants";
import ClientsSection from "@components/sections/landing/ClientsSection.astro";

const currentPath = Astro.url.pathname;

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}

// This gets the static paths for all the unique projects

export async function getStaticPaths() {
  const productEntries = await getCollection("projects", ({ id }) =>
    id.startsWith("en/")
  );
  return productEntries.map((product) => {
    const idWithoutLang = product.id.replace(/^en\//, ""); // Remove the "en/" prefix
    return {
      params: { id: idWithoutLang },
      props: { product },
    };
  });
}

const { id } = Astro.params;

const projectEntry = await getCollection("projects", ({ id: entryId }) =>
  entryId === `en/${id}`
);

if (!projectEntry || projectEntry.length === 0) {
  return new Response("Project not found", { status: 404 });
}

const product = projectEntry[0];
const images = product.data.images;

const projects: CollectionEntry<"projects">[] = (
  await getCollection("projects", ({ id }) => {
    return id.startsWith("en/");
  })
).sort(
  (a: CollectionEntry<"projects">, b: CollectionEntry<"projects">) =>
    a.data.main.id - b.data.main.id,
);

// Pagination Settings
const itemsPerPage = 12;
const currentPage = Number(Astro.url.searchParams.get("page")) || 1;
const totalPages = Math.ceil(images.length / itemsPerPage);
const paginatedImages = images.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

// Generate Pagination Links
let pageNumbers = [];
if (totalPages <= 5) {
  pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);
} else {
  if (currentPage <= 3) {
    pageNumbers = [1, 2, 3, "...", totalPages];
  } else if (currentPage >= totalPages - 2) {
    pageNumbers = [1, "...", totalPages - 2, totalPages - 1, totalPages];
  } else {
    pageNumbers = [1, "...", currentPage - 1, currentPage, currentPage + 1, "...", totalPages];
  }
}

const pageTitle: string = `${product.data.title} | ${SITE.title}`;
const visibleItems = 3;
---

<MainLayout title={pageTitle}>
  <SubHeroSection
    title="Projects"
    subTitle="Don't hesitate to contact us. Let's collaborate and bring your vision to lifeâ€”because at Metalindo, your satisfaction is our priority."
    src={bg1}
    alt="Contact Us"
  />

  <nav class="bg-redP text-white relative mt-8 sm:mt-18 md:mt-4 4xl:mt-24">
    <!-- Responsive Navigation -->
    <div class="flex sm:justify-center overflow-x-auto sm:overflow-visible whitespace-nowrap no-scrollbar">
      {projects.map((project, index) => {
        const isActive = currentPath.includes(project.data.tabName.toLowerCase());
  
        return (
          <a
            href={`/projects/${project.data.tabName.toLowerCase()}`}
            class={`relative px-4 py-2 flex-shrink-0 ${isActive ? 'bg-white text-redP' : 'bg-redP text-white'} 
            hover:bg-white hover:text-redP transition
            ${index !== 0 ? 'before:absolute before:left-0 before:inset-y-0 before:w-[2px] before:bg-white' : ''}`}
          >
            {project.data.title}
          </a>
        );
      })}
    </div>
  </nav>  
  <section class="mx-auto max-w-[85rem] default-p 2xl:max-w-full relative z-10">
    <div id="fadeText" class="flex flex-col sm:flex-row justify-between items-center py-2 my-8">
      <h1 class="font-oswald font-bold text-3xl md:text-4xl leading-tight tracking-tight">{product.data.title}</h1>
      <h3 class="font-medium w-full py-2 sm:py-0 sm:w-1/3">{product.data.main.mainDesc}</h3>
      <PrimaryCTA title="Order Now" url="/contact" />
    </div>
    <!-- Image Gallery -->
    <div id="image-gallery" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4" data-total-pages={totalPages}>
      {images.map((project, index) => (
        <div 
          class="relative group hidden cursor-pointer" 
          data-index={index} 
          data-src={project.url.src}
          data-alt={project.alt}
        >
          <Image src={project.url} alt={project.alt} loading="lazy" decoding="async" class="w-full h-auto object-cover aspect-[3/2]" />
          <div class="absolute inset-0 bg-red-600 bg-opacity-80 flex items-start justify-start opacity-0 group-hover:opacity-100 transition-opacity">
            <span class="text-white font-oswald leading-tight tracking-tight font-bold text-xl sm:text-2xl md:text-3xl ml-8 mt-8 border-l-2 border-white pl-4">
              {project.title}
            </span>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Image Modal using Astro's Image Component -->
    <div id="image-modal" class="fixed inset-0 bg-black bg-opacity-75 hidden flex items-center justify-center z-50">
      <div class="relative p-4 max-w-3xl w-full">
        <!-- Close Button -->
        <button id="close-modal" class="absolute top-4 right-8 text-white text-3xl font-bold">&times;</button>

        <!-- Modal Image Container -->
        <div id="modal-image-container" class="w-full h-auto max-h-[80vh] object-contain rounded-xs shadow-lg">
          <Image id="modal-image" src={printerBg} alt="Placeholder Image" class="w-full h-auto object-contain rounded-xs shadow-lg" />
        </div>
      </div>
    </div>

    <!-- Pagination Controls -->
    <div class="flex justify-center space-x-2 mt-8" id="pagination">
      <button id="prev-page" class="px-3 py-2 bg-redP text-white rounded hover:bg-red-400">Prev</button>
      <span id="page-numbers" class="space-x-2"></span>
      <button id="next-page" class="px-3 py-2 bg-redP text-white rounded hover:bg-red-400">Next</button>
    </div>
  </section>

    <ClientsSection
    title="our client"
    subTitle="We already working with a diverse range of clients across various industries"
    partners={partnersData}
  />
</MainLayout>

<style>
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  /* Modal Animations */
  #image-modal {
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  #image-modal.hidden {
    opacity: 0;
    visibility: hidden;
  }
</style>

<!-- JavaScript for Modal Functionality -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("image-modal");
    const modalImageContainer = document.getElementById("modal-image-container");
    const closeModalBtn = document.getElementById("close-modal");

    const gallery = document.getElementById("image-gallery");
    if (!gallery) return;

    const imageElements = gallery.querySelectorAll(".group");

    function openModal(imageSrc: string, imageAlt: string) {
      if (modal && modalImageContainer) {
        modalImageContainer.innerHTML = "";

        if (typeof imageSrc !== "string" || imageSrc.trim() === "") {
          console.error("Invalid image source:", imageSrc);
          return;
        }

        const imgElement = document.createElement("img");
        imgElement.src = imageSrc;
        imgElement.alt = imageAlt;
        imgElement.classList.add("w-full", "h-auto", "max-h-[80vh]", "object-contain", "rounded-xs", "shadow-lg");

        modalImageContainer.appendChild(imgElement);
        modal.classList.remove("hidden");
      }
    }


    function closeModal() {
      if (modal) {
        modal.classList.add("hidden");
      }
    }

    imageElements.forEach((image) => {
      const imageElement = image as HTMLElement;
      imageElement.addEventListener("click", () => {
        const imgSrc = imageElement.getAttribute("data-src");
        const imgAlt = imageElement.getAttribute("data-alt");

        if (imgSrc && imgAlt) {
          openModal(imgSrc, imgAlt);
        } else {
          console.error("Missing image src or alt:", { imgSrc, imgAlt });
        }
      });
    });

    if (closeModalBtn) {
      closeModalBtn.addEventListener("click", closeModal);
    }

    // Close modal when clicking outside the image
    modal?.addEventListener("click", function (event) {
      const target = event.target as HTMLElement | null;
      if (modal && !modal.classList.contains("hidden") && target && !target.closest("img")) {
        closeModal();
      }
    });
  });
</script>

<!-- JavaScript for Dynamic Pagination -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    let currentPage: number = 1;
    const itemsPerPage: number = 12;
    const gallery = document.getElementById("image-gallery");

    if (!gallery) return;

    // Ensure totalPages is always a number
    const totalPages: number = parseInt(String(gallery.getAttribute("data-total-pages") || "1"), 10);

    // Select elements safely and cast them correctly
    const images = document.querySelectorAll("#image-gallery .group");
    const pageNumbersContainer = document.getElementById("page-numbers");
    const prevBtn = document.getElementById("prev-page") as HTMLButtonElement | null;
    const nextBtn = document.getElementById("next-page") as HTMLButtonElement | null;

    if (!pageNumbersContainer || !prevBtn || !nextBtn) return;

    function updatePagination(): void {
      // Show only relevant images
      images.forEach((image, index) => {
        const start = (currentPage - 1) * itemsPerPage;
        const end = start + itemsPerPage;
        image.classList.toggle("hidden", index < start || index >= end);
      });

      // Clear pagination numbers
      if (pageNumbersContainer) pageNumbersContainer.innerHTML = "";

      let pageNumbers: (number | string)[] = [];

      // Handle different page cases
      if (totalPages <= 5) {
        pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);
      } else {
        if (currentPage <= 3) {
          pageNumbers = [1, 2, 3, "...", totalPages];
        } else if (currentPage >= totalPages - 2) {
          pageNumbers = [1, "...", totalPages - 2, totalPages - 1, totalPages];
        } else {
          pageNumbers = [1, "...", currentPage - 1, currentPage, currentPage + 1, "...", totalPages];
        }
      }

      // Create pagination buttons
      pageNumbers.forEach((page) => {
        const pageButton = document.createElement("button");
        pageButton.textContent = String(page);
        pageButton.className = `px-3 py-2 rounded hover:bg-red-400 transition ${
          currentPage === page ? "bg-red-600 font-bold text-white" : "bg-gray-300 text-black"
        }`;

        if (typeof page === "number") {
          pageButton.onclick = () => changePage(page);
        } else {
          pageButton.disabled = true;
        }

        if (pageNumbersContainer) pageNumbersContainer.appendChild(pageButton);
      });

      if (prevBtn) prevBtn.disabled = currentPage === 1;
      if (nextBtn) nextBtn.disabled = currentPage === totalPages;
    }

    function changePage(newPage: number): void {
      if (newPage >= 1 && newPage <= totalPages) {
        currentPage = newPage;
        updatePagination();
      }
    }

    // Event Listeners for Buttons
    prevBtn.addEventListener("click", () => changePage(currentPage - 1));
    nextBtn.addEventListener("click", () => changePage(currentPage + 1));

    // Initialize pagination
    updatePagination();
  });
</script>

<!-- smooth horizontal -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
  const scrollContainer = document.querySelector(".overflow-x-auto") as HTMLElement | null;
  
  if (!scrollContainer) return;

  let isDown: boolean = false;
  let startX: number = 0;
  let scrollLeft: number = 0;

  scrollContainer.addEventListener("mousedown", (e: MouseEvent) => {
    isDown = true;
    scrollContainer.classList.add("active");
    startX = e.pageX - scrollContainer.offsetLeft;
    scrollLeft = scrollContainer.scrollLeft;
  });

  scrollContainer.addEventListener("mouseleave", () => {
    isDown = false;
    scrollContainer.classList.remove("active");
  });

  scrollContainer.addEventListener("mouseup", () => {
    isDown = false;
    scrollContainer.classList.remove("active");
  });

  scrollContainer.addEventListener("mousemove", (e: MouseEvent) => {
    if (!isDown) return;
    e.preventDefault();
    const x = e.pageX - scrollContainer.offsetLeft;
    const walk = (x - startX) * 2; // Adjust scroll speed
    scrollContainer.scrollLeft = scrollLeft - walk;
  });
});

</script>

<script>
  import { gsap } from "gsap";
  
  document.addEventListener("DOMContentLoaded", function () {
    const button = document.getElementById("toggle-button-project");
    const toggleText = document.getElementById("toggle-text");
    const collapsible = document.getElementById("extra-projects");

    button?.addEventListener("click", function () {
      if (!collapsible) return;
      if (!toggleText) return;
      collapsible.classList.toggle("hidden");

      if (collapsible.classList.contains("hidden")) {
        toggleText.textContent = "All Projects â–¼";
      } else {
        toggleText.textContent = "Show Less â–²";
      }
    });
  });

  type AnimationSettings = {
    autoAlpha?: number;
    y?: number;
    x?: number;
    willChange?: string;
  };

  function setElementAnimationDefaults(
    id: string,
    settings: AnimationSettings
  ) {
    gsap.set(id, settings);
  }

  setElementAnimationDefaults("#fadeText", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInUp", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInMoveRight", {
    autoAlpha: 0,
    x: 300,
    willChange: "transform, opacity",
  });

  let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });

  timeline.to("#fadeText", {
    duration: 1.5,
    autoAlpha: 1,
    y: 0,
    delay: 1,
    ease: "power2.out",
  });

  timeline.to(
    "#fadeInUp",
    { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" },
    "-=1.2"
  );

  timeline.to(
    "#fadeInMoveRight",
    { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" },
    "-=1.4"
  );

  timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn: any, activeButton: any) {
      if (btn !== activeButton) {
        btn.classList.remove(
          "active",
          "bg-neutral-100",
          "hover:border-transparent",
          "dark:bg-white/[.05]"
        );

        const tabId = btn.getAttribute("data-target");
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) {
            contentElement.classList.add("hidden");
          }
        }

        changeHeadingStyle(
          btn,
          ["text-neutral-800", "dark:text-neutral-200"],
          ["text-orange-400", "dark:text-orange-300"]
        );
      }
    }

    function activateButton(button: any) {
      button.classList.add(
        "active",
        "bg-neutral-100",
        ",hover:border-transparent",
        "dark:bg-white/[.05]"
      );

      const tabId = button.getAttribute("data-target");
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) {
          contentElementToShow.classList.remove("hidden");
        }
      }

      changeHeadingStyle(
        button,
        ["text-orange-400", "dark:text-orange-300"],
        ["text-neutral-800", "dark:text-neutral-200"]
      );
    }

    function changeHeadingStyle(
      button: any,
      addClasses: any,
      removeClasses: any
    ) {
      let heading = button.querySelector("span");
      if (heading) {
        heading.classList.remove(...removeClasses);
        heading.classList.add(...addClasses);
      }
    }

    const tabButtons = document.querySelectorAll("[data-target]");

    if (tabButtons.length > 0) {
      changeHeadingStyle(
        tabButtons[0],
        ["text-orange-400", "dark:text-orange-300"],
        []
      );
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>
